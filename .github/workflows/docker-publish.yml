name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'bioengine_worker/**'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'Dockerfile'
      - '.dockerignore'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Extract current version from pyproject.toml
      run: |
        VERSION=$(grep -E '^version\s*=' pyproject.toml | sed -E 's/version\s*=\s*"(.*)"/\1/')
        if [ -z "$VERSION" ]; then
          echo "‚ùå Could not extract version from pyproject.toml"
          exit 1
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Extract previous version from HEAD~1
      run: |
        PREVIOUS_VERSION=$(git show HEAD~1:pyproject.toml | grep -E '^version\s*=' | sed -E 's/version\s*=\s*"(.*)"/\1/')
        if [ -z "$PREVIOUS_VERSION" ]; then
          echo "‚ùå Could not extract version from pyproject.toml in HEAD~1"
          exit 1
        fi
        echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

    - name: Check that version is updated and newer
      run: |
        echo "üì¶ Previous version: $PREVIOUS_VERSION"
        echo "üì¶ Current version:  $VERSION"
        if [ "$VERSION" = "$PREVIOUS_VERSION" ]; then
          echo "‚ùå Version has not been updated. Please bump the version in pyproject.toml."
          exit 1
        fi
        if [ "$(printf '%s\n' "$PREVIOUS_VERSION" "$VERSION" | sort -V | head -n1)" = "$VERSION" ]; then
          echo "‚ùå New version ($VERSION) is not greater than previous version ($PREVIOUS_VERSION)."
          exit 1
        fi
        echo "‚úÖ Version updated correctly."

    - name: Check if Docker image tag already exists
      run: |
        IMAGE="ghcr.io/${{ github.repository }}:$VERSION"
        echo "üîç Checking if image $IMAGE exists..."
        if docker pull "$IMAGE" > /dev/null 2>&1; then
          echo "‚ùå Docker image tag $IMAGE already exists. Please bump the version."
          exit 1
        else
          echo "‚úÖ Docker image tag $IMAGE does not exist yet."
        fi

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ env.VERSION }}
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
